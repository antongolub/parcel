// @flow

import {Transformer} from '@parcel/plugin';
import typescript from 'typescript';

type TypescriptCompilerOptions = {
  module: any,
  jsx: any,
  esModuleInterop: boolean,
  noEmit?: boolean,
  sourceMap?: boolean
};

type TypescriptTranspilerOptions = {
  compilerOptions: TypescriptCompilerOptions,
  fileName: string
};

export default new Transformer({
  async getConfig({asset}) {
    return asset.getConfig(['tsconfig.json']);
  },

  async transform({asset, config}) {
    asset.type = 'js';

    // require typescript, installed locally in the app
    let transpilerOptions: TypescriptTranspilerOptions = {
      compilerOptions: {
        /*module: options.scopeHoist
          ? typescript.ModuleKind.ESNext
          : typescript.ModuleKind.CommonJS,*/
        module: typescript.ModuleKind.CommonJS,

        // Not sure if this is a good idea...
        jsx: typescript.JsxEmit.react,

        // it brings the generated output from TypeScript closer to that generated by Babel
        // see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html
        esModuleInterop: true
      },
      fileName: asset.filePath // Should be relativePath?
    };

    // Overwrite default if config is found
    if (config) {
      transpilerOptions.compilerOptions = Object.assign(
        transpilerOptions.compilerOptions,
        config.compilerOptions
      );
    }
    transpilerOptions.compilerOptions.noEmit = false;
    // transpilerOptions.compilerOptions.sourceMap = options.sourceMaps;

    // Transpile Module using TypeScript
    let transpiled = typescript.transpileModule(asset.code, transpilerOptions);
    // let sourceMap = transpiled.sourceMapText;

    /*if (sourceMap) {
      sourceMap = JSON.parse(sourceMap);
      sourceMap.sources = [asset.relativeName];
      sourceMap.sourcesContent = [asset.code];

      // Remove the source map URL
      let content = transpiled.outputText;
      transpiled.outputText = content.substring(
        0,
        content.lastIndexOf('//# sourceMappingURL')
      );
    }*/

    return [
      {
        type: 'js',
        code: transpiled.outputText
        // map: sourceMap
      }
    ];
  }
});
